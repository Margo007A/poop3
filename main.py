import logging
import json
import random
import asyncio
from datetime import datetime, timedelta
import pytz

from telegram import Update, ChatMember
from telegram.ext import (
    ApplicationBuilder, CommandHandler, ContextTypes
)

# === –¢–í–û–ò –î–ê–ù–ù–´–ï ===
BOT_TOKEN = "8276571944:AAF3ypIPxV-IPJYW-Rr6PiEql8vUONzEGeE"
GROUP_CHAT_ID = -1002444770684
THREAD_ID = 2
REMINDER_HOUR = 20
REMINDER_MINUTE = 50
USER_DATA_FILE = "subscribers.json"
MSK = pytz.timezone("Europe/Moscow")

# === –õ–û–ì–ò ===
logging.basicConfig(level=logging.INFO)

# === –ó–ê–ì–†–£–ó–ö–ê/–°–û–•–†–ê–ù–ï–ù–ò–ï ===
def load_users():
    try:
        with open(USER_DATA_FILE, "r") as f:
            return json.load(f)
    except:
        return []

def save_users(data):
    with open(USER_DATA_FILE, "w") as f:
        json.dump(data, f)

subscribers = load_users()

# === –®–£–¢–ö–ò ===
JOKES = [
    "üì∏ –°–∫—Ä–∏–Ω –∏–ª–∏ –ø–æ–∑–æ—Ä. –¢—ã –∑–Ω–∞–µ—à—å, —á—Ç–æ –¥–µ–ª–∞—Ç—å!",
    "‚è∞ –ù–µ –∑–∞–±—É–¥—å –ø—Ä–æ –∞–∫—Ç–∏–≤ –≤ 20:50!",
    "üò¥ –ü—Ä–æ—Å—ã–ø–∞–π—Å—è, –ø–æ—Ä–∞ —Å–∫—Ä–∏–Ω–∏—Ç—å!",
] + [f"üé≠ –®—É—Ç–∫–∞ #{i}" for i in range(10)]

# === –ü–†–û–í–ï–†–ö–ê –£–ß–ê–°–¢–ù–ò–ö–ê –ì–†–£–ü–ü–´ ===
async def is_user_in_group(bot, user_id):
    try:
        member = await bot.get_chat_member(GROUP_CHAT_ID, user_id)
        return member.status in [ChatMember.MEMBER, ChatMember.ADMINISTRATOR, ChatMember.OWNER]
    except:
        return False

# === /start ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if update.effective_chat.type != "private":
        return

    if not await is_user_in_group(context.bot, user.id):
        await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –≥—Ä—É–ø–ø—ã –º–æ–≥—É—Ç –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è.")
        return

    if user.id not in subscribers:
        subscribers.append(user.id)
        save_users(subscribers)
        await update.message.reply_text("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞.")
        await context.bot.send_message(
            chat_id=GROUP_CHAT_ID,
            message_thread_id=THREAD_ID,
            text=f"‚úÖ @{user.username or user.first_name} –Ω–∞–∂–∞–ª /start –∏ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ."
        )
    else:
        await update.message.reply_text("üôÇ –¢—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω.")

# === /stop ===
async def stop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id in subscribers:
        subscribers.remove(update.effective_user.id)
        save_users(subscribers)
        await update.message.reply_text("‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    else:
        await update.message.reply_text("–¢—ã –∏ —Ç–∞–∫ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω.")

# === /list ===
async def list_subs(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not subscribers:
        text = "üì≠ –ù–∏–∫—Ç–æ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω."
    else:
        text = "üìã –°–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤:\n" + "\n".join([f"[{uid}](tg://user?id={uid})" for uid in subscribers])
    await update.message.reply_text(text, parse_mode="Markdown")

# === –¶–ò–ö–õ –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–Ø ===
async def reminder_loop(bot):
    while True:
        now = datetime.now(MSK)
        target = now.replace(hour=REMINDER_HOUR, minute=REMINDER_MINUTE, second=0, microsecond=0)
        if now >= target:
            target += timedelta(days=1)
        wait = (target - now).total_seconds()
        await asyncio.sleep(wait)

        try:
            await bot.send_message(
                chat_id=GROUP_CHAT_ID,
                message_thread_id=THREAD_ID,
                text="‚è∞ –í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –≥—Ä—É–ø–ø—ã –ø–æ–ª—É—á–∏–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–∫—Ä–∏–Ω–∞—Ö –≤ 20:50 –ø–æ –ú–°–ö!"
            )
        except Exception as e:
            logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ —Ç–µ–º—É: {e}")

        for uid in subscribers:
            try:
                await bot.send_message(chat_id=uid, text=random.choice(JOKES))
            except Exception as e:
                logging.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {uid}: {e}")

# === –ó–ê–ü–£–°–ö ===
async def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("stop", stop))
    app.add_handler(CommandHandler("list", list_subs))
    asyncio.create_task(reminder_loop(app.bot))
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –∂–¥—ë—Ç 20:50 –ø–æ –ú–°–ö...")
    await app.run_polling()

if __name__ == "__main__":
    asyncio.run(main())



